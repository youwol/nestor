name: Static analyzes a typescript package
description: Various quality checks for typescript packages, optionnaly uploading analysis artefacts
inputs:
  archive:
    description: "artefacts archive name"
    required: false
    default: 'static_analysis'
  ignore:
    description: "list of analysis failure to ignore (audit prettier eslint)"
    required: false
    default: ''



runs:
  using: composite

  steps:
    - name: Prepare artefact directory
      id: prepare_dir
      run: |
        [ -d dist ] || mkdir dist
      shell: sh

    - name: Audit dependencies
      id: yarn_audit
      env:
        job_id: ${{ github.job }}
      run: |
        # Yarn audit
        if yarn -s audit --json > dist/audit.json; then
          echo "::set-ouput name=result::ok"
        else
          title="Security issues in dependencies for job '${job_id}'"
          echo "::group::Yarn auditing report"
          yarn audit || true
          echo "::endgroup::"
          echo "::warning title=${title}::See 'Yarn auditing report' in logs and audit.json for details"
          echo "::set-output name=result::ko"
        fi
      shell: sh

    - name: Check code quality with yarn eslint
      id: yarn_eslint
      env:
        job_id: ${{ github.job }}
      run: |
        # Yarn eslint
        if yarn -s eslint --format html --output-file dist/eslint.html . ; then
          echo "::set-output name=result::ok"
        else
          title="Code-quality concerns for job '${job_id}'"
          echo "::warning title=${title}::See logs and eslint.html for details"
          echo "::set-output name=result::ko"
        fi
      shell: sh

    - name: Check code formatting with yarn prettier
      id: yarn_prettier
      env:
        job_id: ${{ github.job }}
      run: |
        # Yarn prettier
        echo "::group::Yarn prettier logs"
        if files=$(yarn -s prettier --list-different .) ; then
          echo $files
          echo "::endgroup::"
          echo "::set-output name=result::ok"
        else
          echo "::endgroup::"
          title="Malformatted code source for job '${job_id}'"
          echo "::warning title=${title}::See 'Yarn prettier logs' and/or annotations for details"
          for file in ${files} ; do
            echo "::warning file=${file},title=${title}::Mal-formatted file"
          done
          echo "::set-output name=result::ko"
        fi
      shell: sh

    - name: Prepare site artefacts
      id: prepare_site_artefacts
      if: inputs.archive != ''
      run: |
        ### Prepare site artefacts
        site_dir="site"
        mkdir -p "${site_dir}"
        mv dist/eslint.html "${site_dir}/"
        echo "::set-output name=dir::$(realpath ${site_dir})"
      shell: sh

    - name: Prepare data artefacts
      id: prepare_data_artefacts
      if: inputs.archive != ''
      run: |
        ### Prepare data artefacts
        data_dir="_data"
        mkdir -p "${data_dir}"
        mv dist/audit.json "${data_dir}/"
        echo "::set-output name=dir::$(realpath ${data_dir})"
      shell: sh

    - name: Upload artefacts
      id: upload_artefacts
      if: inputs.archive != ''
      uses: actions/upload-artifact@v3
      with:
        name: ${{ inputs.archive }}
        path: |
          ${{ steps.prepare_data_artefacts.outputs.dir }}
          ${{ steps.prepare_site_artefacts.outputs.dir }}

    - name: Summary
      id: summary
      env:
        job_id: ${{ github.job }}
        audit: ${{ steps.yarn_audit.outputs.result }}
        ignore_audit: ${{ contains(inputs.ignore, 'audit') }}
        eslint: ${{ steps.yarn_eslint.outputs.result }}
        ignore_eslint: ${{ contains(inputs.ignore, 'eslint') }}
        prettier: ${{ steps.yarn_prettier.outputs.result }}
        ignore_prettier: ${{ contains(inputs.ignore, 'prettier') }}
      run: |
        # Summary
        title="Static analysis for job '${job_id}'"
        ignored="false"
        global_failure="false"
        if [ "${audit}" != 'ok' ]; then
          if ${ignore_audit}; then
            echo "::warning title=${title}::Ignoring dependencies audit failure"
            ignored="true"
          else
            echo "::error title=${title}::Static analysis failed because of dependencies security issues"
            global_failure="true"
          fi
        fi
        if [ "${eslint}" != 'ok' ]; then
          if ${ignore_eslint}; then
            echo "::warning title=${title}::Ignoring code-quality concerns"
            ignored="true"
          else
            echo "::error title=${title}::Static analysis failed because of code-quality concerns"
            global_failure="true"
          fi
        fi
        if [ "${prettier}"  != 'ok' ]; then
          if ${ignore_prettier}; then
            echo "::warning title=${title}::Ignoring code formatting concerns"
            ignored="true"
          else
            echo "::error title=${title}::Static analysis failed because of code formatting concerns"
            global_failure="true"
          fi
        fi
        if [ "${global_failure}" = 'true' ]; then
          exit 1
        elif [ "${ignored}" = 'true' ]; then
          echo "::warning title=${title}::Static analysis pass because some failures were ignored"
        else
          echo "::notice title=${title}::Success"
        fi
      shell: sh
